library(reshape2)
library(leaflet)
library(RCurl)
library(rjson)
library(jsonlite)
map_data = read.csv("./data/map_data_04_16_2020.csv") %>% filter(str_detect(tag,year))
year = 2018
map_data = read.csv("./data/map_data_04_16_2020.csv") %>% filter(str_detect(tag,year))
map_data = read.csv("./data/map_data_04_16_2020.csv") %>% filter(str_detect(tag,as.character(year)))
map_data = read.csv("./data/map_data_04_16_2020.csv") %>% filter(str_detect(tag,as.character(year)))
View(map_data)
cols_to_take <- c("stationid","latitude","longitude")
map_data = read.csv("./data/map_data_04_16_2020.csv") %>%
filter(str_detect(tag,as.character(year))) %>%
mutate(water = ifelse(str_detect(water,"Ocean"), "Ocean", "River"))
map_data = read.csv("./data/map_data_04_16_2020.csv") %>%
filter(str_detect(tag,as.character(year))) %>%
mutate(water = ifelse(str_detect(tag,"Ocean"), "Ocean", "River"))
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
tab2_mapper <- function(data){
shapes = c(16, 17)
iconFiles = pchIcons(shapes, 10, 10, col = c("blue", "red"), lwd = 2)
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addMapPane(name = "CartoDB_VoyagerNoLabels", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
# popup = ~ paste(stratum, water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
}
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
shiny::runApp()
runApp()
year = 1998
cols_to_take <- c("stationid","latitude","longitude")
map_data = read.csv("./data/map_data_04_16_2020.csv") %>%
filter(str_detect(tag,as.character(year))) %>%
mutate(water = ifelse(str_detect(tag,"Ocean"), "Ocean", "River"))
map_data = read.csv("./data/map_data_04_16_2020.csv")
table(map_data$tag)
runApp()
data.frame(year = c(1994,1998,2008,2013,2018),
Ocean = c(113,242,140,164,164),
River = c(70,70,70,273,118)) %>%
melt(id.vars = "year") %>%
ggplot(aes(x = year, y = value, fill = variable, shape = variable)) +
geom_bar(stat="identity", position ="dodge", alpha = 0.5, linetype = "dashed") +
scale_fill_manual(values = c("Ocean"="blue", "River"="red")) +
labs(x = "Year", y = "Number of Sites Sampled") +
facet_wrap(variable~., scales = "free_y", ncol = 1) +
theme_minimal() +
theme(legend.position = "none")
data.frame(year = c(1994,1998,2008,2013,2018),
Ocean = c(113,242,140,164,164),
River = c(70,70,70,273,118)) %>%
melt(id.vars = "year") %>%
ggplot(aes(x = year, y = value, fill = variable, shape = variable)) +
geom_bar(stat="identity", position ="dodge", alpha = 0.5, linetype = "dashed") +
scale_fill_manual(values = c("Ocean"="blue", "River"="red")) +
labs(x = "Year", y = "Number of Sites Sampled") +
facet_wrap(variable~., scales = "free_y", ncol = 1) +
theme_classic() +
theme(legend.position = "none")
data.frame(year = c(1994,1998,2008,2013,2018),
Ocean = c(113,242,140,164,164),
River = c(70,70,70,273,118)) %>%
melt(id.vars = "year") %>%
ggplot(aes(x = as.character(year), y = value, fill = variable, shape = variable)) +
geom_bar(stat="identity", position ="dodge", alpha = 0.5, linetype = "dashed") +
scale_fill_manual(values = c("Ocean"="blue", "River"="red")) +
labs(x = "Year", y = "Number of Sites Sampled") +
facet_wrap(variable~., scales = "free_y", ncol = 1) +
theme_classic() +
theme(legend.position = "none")
runApp()
data.frame(year = c(1994,1998,2008,2013,2018),
Ocean = c(113,242,140,164,164),
River = c(70,70,70,273,118)) %>%
melt(id.vars = "year") %>%
ggplot(aes(x = as.character(year), y = value, fill = variable, shape = variable)) +
geom_bar(stat="identity", position ="dodge", alpha = 0.5, linetype = "dashed") +
scale_fill_manual(values = c("Ocean"="blue", "River"="red")) +
labs(x = "Year", y = "Number of Sites Sampled") +
facet_wrap(variable~., scales = "free_y", ncol = 1) +
theme_minimal() +
theme(legend.position = "none")
runApp()
tab2_ocean_sites <- function(year){
read.csv("./data/map_data_04_16_2020.csv") %>% filter(tag == paste("Ocean",year)) %>% nrow()
}
tab2_river_sites <- function(year){
read.csv("./data/map_data_04_16_2020.csv") %>% filter(tag == paste("River",year)) %>% nrow()
}
runApp()
runApp()
runApp()
year = 1994
map_data = read.csv("./data/map_data_04_16_2020.csv") %>%
filter(str_detect(tag,as.character(year))) %>%
mutate(water = ifelse(str_detect(tag,"Ocean"), "Ocean", "River"))
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
View(map_data)
leaflet(map_data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addMapPane(name = "CartoDB_VoyagerNoLabels", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
# popup = ~ paste(stratum, water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
data = map_data %>% mutate(water = factor(water, levels = c("Ocean","River")))
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addMapPane(name = "CartoDB_VoyagerNoLabels", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
# popup = ~ paste(stratum, water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addMapPane(name = "CartoDB_VoyagerNoLabels", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ stratum,
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
tab2_mapper <- function(data){
shapes = c(16, 17)
iconFiles = pchIcons(shapes, 10, 10, col = c("blue", "red"), lwd = 2)
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addMapPane(name = "CartoDB_VoyagerNoLabels", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ stratum,
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
}
map_data = read.csv("./data/map_data_04_16_2020.csv") %>%
filter(str_detect(tag,as.character(year))) %>%
mutate(water = ifelse(str_detect(tag,"Ocean"), "Ocean", "River"))
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
year = 1998
map_data = read.csv("./data/map_data_04_16_2020.csv") %>%
filter(str_detect(tag,as.character(year))) %>%
mutate(water = ifelse(str_detect(tag,"Ocean"), "Ocean", "River"))
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
runApp()
runApp()
year = 1998
map_data = read.csv("./data/map_data_04_16_2020.csv") %>%
filter(str_detect(tag,as.character(year))) %>%
mutate(water = ifelse(str_detect(tag,"Ocean"), "Ocean", "River"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(iSEE)
packageVersion("iSEE")
install.packages("iSEE")
install.packages("BiocManager")
BiocManager::install("iSEE", version = "3.10")
library(iSEE)
packageVersion("iSEE")
library(iSEE)
devtools::install_github("csoneson/iSEE")
devtools::install_github("csoneson/iSEE")
update.packages()
library(shiny)
library(shinyjs)
library(shinythemes)
library(shinyWidgets)
library(shinycssloaders)
library(gridExtra)
library(ggsci)
devtools::install_github("csoneson/iSEE")
update.packages("iSEE")
library(iSEE)
require(rstudioapi)
ver <- versionInfo()
library(shiny)
library(shinyjs)
library(shinythemes)
library(shinyWidgets)
library(shinycssloaders)
library(gridExtra)
library(ggsci)
library(iSEE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

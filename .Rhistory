setwd("~/Dropbox (CSU Fullerton)/Consulting project/SCCWRP1-Shiny")
library(shiny)
library(shiny)
library(shiny)
library(shinyjs)
install.packages('shinyjs')
library(shinyjs)
library(shinyjs)
library(shinythemes)
install.packages('shinythemes')
library(shinythemes)
# Define UI for application that draws a histogram
shinyUI(
fluidPage(
# set up logo
tags$a(href = "https://www.sccwrp.org", tags$img(src = "sccwrp_logo.jpg", title = "SCCWRP", width = "300", height = "80")),
navbarPage(
theme = shinytheme("cosmo"),
#cerulean, cosmo**, flatly, journal, lumen**, paper, readable, sandstone, simplex, spacelab*,yeti**
collapsible = TRUE,
"Trash and Marine Debris",
id="nav",
# tab panel for plot
tabPanel(
"Background",
sidebarLayout(
sidebarPanel(sliderInput("bins", "Number of observations:", min = 1, max = 50, value = 5)),
mainPanel(plotOutput("distPlot")))),
# tab panel for maps
tabPanel(
"Station mapper"
),
# tab panel for trend bar over years
tabPanel(
"Trend over years"
),
# tab panel for model on distance vs trash abundance
tabPanel(
"Distance to nearest road"
),
# tab panel for data table
tabPanel(
"Data",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Year", label = "Year", choices = c(2013, 2018)),
radioButtons(inputId = "Type", label = "Type", choices = c("Ocean","River"))),
mainPanel(dataTableOutput("tb_displayed")))),
# tabl panel for all write ups
tabPanel(
"Summary"
)
) # end of navbarPanel
) # end of fluidPage
) # end of ui
runApp()
runApp()
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
get_current <- reactive({
if (input$Year == 2013 & input$Type == "River"){d=read.csv("./data/2013/River/trash_areaweighted_count_by_county.csv")}
else if (input$Year == 2013 & input$Type == "Ocean"){d=readxl::read_excel("./data/2013/Ocean/Debris Ocean 2013.xlsx")}
else if (input$Year == 2018 & input$Type == "River"){d=read.csv("./data/2018/River/river_2018.csv")}
else if (input$Year == 2018 & input$Type == "Ocean"){d=read.csv("./data/2018/Ocean/ocean_2018.csv")}
else{d=NULL}
})
output$tb_displayed <- renderDataTable(get_current())
})
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
2013-5
2008-5
runApp()
runApp()
source("./script/functions.R")
runApp()
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
call_river_2013 <- function(
read.csv("./data/2013/River/Bight_2013_Regional_Survey__Trash_and_Debris_in_Rivers.csv") %>%
mutate(
sampledate = as.Date(sampledate),
stratum = if_else(
as.character(stratum) == 'Ag',
'Agriculture',
as.character(stratum)
)
)
)
shiny::runApp()
runApp()
read.csv("./data/2018/River/river_2018.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
r_birthplace_map <- leaflet() %>%
addTiles() %>%  # use the default base map which is OpenStreetMap tiles
addMarkers(lng=174.768, lat=-36.852,
popup="The birthplace of R")
r_birthplace_map
}
base_url <- "https://data.colorado.gov/resource/j5pc-4t32.json?"
full_url <- paste0(base_url, "station_status=Active",
"&county=BOULDER")
water_data <- getURL(URLencode(full_url))
library(leaflet)
library(RCurl)
}
base_url <- "https://data.colorado.gov/resource/j5pc-4t32.json?"
full_url <- paste0(base_url, "station_status=Active",
"&county=BOULDER")
water_data <- getURL(URLencode(full_url))
# you can then pipe this
water_data_df <- fromJSON(water_data) %>%
flatten(recursive = TRUE) # remove the nested data frame
}
base_url <- "https://data.colorado.gov/resource/j5pc-4t32.json?"
full_url <- paste0(base_url, "station_status=Active",
"&county=BOULDER")
water_data <- getURL(URLencode(full_url))
}
base_url <- "https://data.colorado.gov/resource/j5pc-4t32.json?"
full_url <- paste0(base_url, "station_status=Active",
"&county=BOULDER")
water_data <- getURL(URLencode(full_url))
# you can then pipe this
water_data_df <- fromJSON(water_data) %>%
flatten(recursive = TRUE) # remove the nested data frame
library(leaflet)
library(RCurl)
library(rjson)
library(jsonlite)
#### functions for tab 1: background ------------------ ####
# you can then pipe this
water_data_df <- fromJSON(water_data) %>%
flatten(recursive = TRUE) # remove the nested data frame
# turn columns to numeric and remove NA values
water_data_df <- water_data_df %>%
mutate_at(vars(amount, location.latitude, location.longitude), funs(as.numeric)) %>%
filter(!is.na(location.latitude))
# you can then pipe this
water_data_df <- fromJSON(water_data) %>%
flatten(recursive = TRUE) # remove the nested data frame
# turn columns to numeric and remove NA values
water_data_df <- water_data_df %>%
mutate_at(vars(amount, location.latitude, location.longitude), funs(as.numeric)) %>%
filter(!is.na(location.latitude))
water_locations_map <- leaflet(water_data_df) %>%
addTiles() %>%
addCircleMarkers(lng = ~location.longitude,
lat = ~location.latitude)
water_locations_map <- leaflet(water_data_df)
water_locations_map <- addTiles(water_locations_map)
water_locations_map <- addCircleMarkers(water_locations_map, lng = ~location.longitude,
lat = ~location.latitude)
water_locations_map
View(water_data_df)
tab2_call_map <- function(type, year){
tab2_mapper(read.csv("./data/2018/Ocean/ocean_2018_map.csv"))
}
tab2_mapper <- function(data){
data %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude)
}
tab2_mapper(read.csv("./data/2018/Ocean/ocean_2018_map.csv"))
tab2_mapper <- function(data){
data %>%
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude)
}
tab2_mapper(read.csv("./data/2018/Ocean/ocean_2018_map.csv"))
tab2_mapper <- function(data){
data %>%
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ stratum)
}
tab2_mapper(read.csv("./data/2018/Ocean/ocean_2018_map.csv"))
data %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ stratum)
tab2_mapper <- function(data){
data %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ stratum)
}
tab2_mapper(read.csv("./data/2018/Ocean/ocean_2018_map.csv"))
data %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ abundance)
tab2_mapper <- function(data){
data %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ abundance)
}
tab2_mapper(read.csv("./data/2018/Ocean/ocean_2018_map.csv"))
data = read.csv("./data/2018/Ocean/ocean_2018_map.csv")
data = read.csv("./data/2018/Ocean/ocean_2018_map.csv")
data %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ abundance)
View(data)
names(data)
data %>%
leaflet() %>%
addTiles() %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste(abundance))
data %>%
leaflet() %>%
addProviderTiles("Stamen.Terrain") %>%
addMarkers(lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste(abundance))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinycssloaders)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(c(1998,2003,2008,2013,2018),
c(122,333,444,555,666))
output$tab2_trash_total_bar <- renderPlot(
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(100,200,300,400,500)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line()
)
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(100,200,300,400,500)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line()
output$tab2_trash_total_bar <- renderPlot(
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(100,200,300,400,500) + rnorm(5)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line() +
geom_point()
)
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(100,200,300,400,500) + rnorm(5)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line() +
geom_point()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(100,200,300,400,500) + rnorm(5,50,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line() +
geom_point()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(100,200,300,400,500) + rnorm(5,100,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line() +
geom_point()
rnorm(5,100,10)
c(100,200,300,400,500) + rnorm(5,100,10)
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(100,200,300,400,500) + rnorm(5,100,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line() +
geom_point()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line() +
geom_point()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density), color = "brown3") +
geom_line() +
geom_point() +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown3") +
geom_point(color = "brown3") +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4") +
geom_point(color = "brown4") +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4") +
geom_point(color = "brown4") +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4") +
geom_point(color = "brown4") +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4") +
geom_point(color = "brown4") +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4") +
geom_point(color = "brown4") +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1, alpha = 0.7) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1, alpha = 0.7) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1, alpha = 0.7) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1, alpha = 0.7) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
data.frame(year = c(1998,2003,2008,2013,2018),
trash_density = c(10,20,30,40,50) + rnorm(5,10,10)) %>%
ggplot(aes(x = year, y = trash_density)) +
geom_line(color = "brown4", size = 1, alpha = 0.7) +
geom_point(color = "brown4", size = 2) +
theme_minimal()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

shiny::runApp()
runApp()
runApp()
runApp()
runApp('script')
runApp()
shiny::runApp()
install.packages("shinyWidgets")
runApp()
install.packages(shinycssloaders)
install.packages("shinycssloaders")
runApp()
install.packages("plotrix")
runApp()
install.packages(RCurl)
install.packages("RCurl")
runApp()
install.packages("rjson")
runApp()
runApp()
runApp()
runApp('script')
pretty_action_button <- function(id, label = '',
class = 'btn btn-success',
width = '100%',
disabled = '') {
html_text <- glue::glue(
'<button class="{class} action-button"
type="button" style="width: {width}" {disabled}
id={id}>
{label}
</button>'
)
shiny::HTML(html_text)
}
runApp('script')
runApp()
runApp()
shiny::runApp()
runApp()
runApp('script')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
library(magrittr)
library(readxl)
library(plotrix)
library(reshape2)
library(leaflet)
library(RCurl)
library(rjson)
library(jsonlite)
pchIcons <- function(pch = 1, width = 30, height = 30, bg = "transparent", col = "black", ...){
n = length(pch)
files = character(n)
# create a sequence of png images
for (i in seq_len(n)) {
f = tempfile(fileext = '.png')
png(f, width = width, height = height, bg = bg)
par(mar = c(0, 0, 0, 0))
plot.new()
points(.5, .5, pch = pch[i], col = col[i], cex = min(width, height) / 8, ...)
dev.off()
files[i] = f
}
files
}
shapes = c(1, 2)
iconFiles = pchIcons(shapes, 10, 10, col = c("blue", "red"), lwd = 4)
cols_to_take_ocean <- c("stationid","latitude","longitude","stratum")
cols_to_take_river <- c("stationid","latitude"="new_lat","longitude"="new_long","stratum"="land_use")
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take_ocean) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take_river) %>% mutate(water = "River")
) %>%
mutate(water = as.factor(water)) %>%
tab2_mapper()
read.csv("./data/2018/River/river_2018_map.csv") %>% View()
dt = read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take_river)
dt = read.csv("./data/2018/River/river_2018_map.csv") %>% names()
read.csv("./data/2018/River/river_2018_map.csv") %>% names()
### play around of Kriging surface
cols_to_take_river2 <-
c("stationid","latitude"="new_lat","longitude"="new_long","stratum"="land_use",
"count"="total_count", "area"="area_sqkm")
dt = read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take_river2)
View(dt)
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area)
hist(dt$abundance)
hist(dt$abundance)
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area) %>%
filter(abundance > 10)
hist(dt$abundance)
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area) %>%
filter(abundance < 10)
hist(dt$abundance)
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area)
table(dt$abundance)
summary(dt$abundance)
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area)
sum(dt$abundance > 10)
sum(dt$abundance >= 10)
dt$abundance[dt$abundance >= 10]
dt$abundance[dt$abundance >= 100]
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area) %>%
filter(abundance < 50)
ggplot(dt, aes(x = longitude,
y = latitude,
color = abundance)) +
geom_point()
ggplot(dt, aes(x = longitude,
y = latitude,
color = abundance,
shape = abundance)) +
geom_point()
ggplot(dt, aes(x = longitude,
y = latitude,
color = abundance)) +
geom_point(aes(size = abundance))
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area) %>%
filter(abundance < 10)
ggplot(dt, aes(x = longitude,
y = latitude,
color = abundance)) +
geom_point(aes(size = abundance))
hist(dt$abundance)
dt =
read.csv("./data/2018/River/river_2018_map.csv") %>%
select(cols_to_take_river2) %>%
mutate(abundance = count/area) %>%
filter(abundance < 1)
hist(dt$abundance)
cols_to_take <- c("stationid","latitude","longitude","stratum")
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
) %>%
mutate(water = as.factor(water)) %>%
tab2_mapper()
shapes = c(1, 2)
iconFiles = pchIcons(shapes, 10, 10, col = c("blue", "red"), lwd = 2)
cols_to_take <- c("stationid","latitude","longitude","stratum")
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
) %>%
mutate(water = as.factor(water)) %>%
tab2_mapper()
a1 = c("O","d")
a1 == c("O",d)
a1 == c("O","d")
a1 %in% c("O","d")
a1 = ")"
a1 = "O"
ai == c("O","d")
tab2_mapper <- function(data){
leaflet(data) %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste(stratum, water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
}
shiny::runApp()
runApp()
map_data =
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
)}
year = 2018
type = "Ocean"
## 2018
if(year == 2018){
## both river and ocean
if(length(type) == 2){
map_data =
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
)}
if(length(type) == 1 && type == "River"){
map_data = read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
}
if(length(type) == 1 && type == "Ocean"){
map_data = read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean")
}
}
map_data %>% mutate(water = as.factor(water)) %>% tab2_mapper()
type = "River"
map_data %>% mutate(water = as.factor(water)) %>% tab2_mapper()
year = 2018
type = "River"
## both river and ocean
if(length(type) == 2){
map_data =
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
)}
## 2018
if(year == 2018){
## both river and ocean
if(length(type) == 2){
map_data =
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
)}
if(length(type) == 1 && type == "River"){
map_data = read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
}
if(length(type) == 1 && type == "Ocean"){
map_data = read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean")
}
}
map_data %>% mutate(water = as.factor(water)) %>% tab2_mapper()
map_data %>% mutate(water = as.factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
year = 2018
type = "River"
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
year = 2018
type = "Ocean"
## 2018
if(year == 2018){
## both river and ocean
if(length(type) == 2){
map_data =
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
)}
if(length(type) == 1 && type == "River"){
map_data = read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
}
if(length(type) == 1 && type == "Ocean"){
map_data = read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean")
}
}
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
year = 2018
type = c("Ocean","River")
## 2018
if(year == 2018){
## both river and ocean
if(length(type) == 2){
map_data =
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
)}
if(length(type) == 1 && type == "River"){
map_data = read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
}
if(length(type) == 1 && type == "Ocean"){
map_data = read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean")
}
}
## 2018
if(year == 2018){
## both river and ocean
if(length(type) == 2){
map_data =
bind_rows(
read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean"),
read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
)}
if(length(type) == 1 && type == "River"){
map_data = read.csv("./data/2018/River/river_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "River")
}
if(length(type) == 1 && type == "Ocean"){
map_data = read.csv("./data/2018/Ocean/ocean_2018_map.csv") %>% select(cols_to_take) %>% mutate(water = "Ocean")
}
}
map_data %>% mutate(water = factor(water, levels = c("Ocean","River"))) %>% tab2_mapper()
runApp()
runApp()
leaflet(data) %>%
addTiles() %>%
addMapPane(name = "maplabels", zIndex = 420) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addMapPane(name = "Esri.WorldImagery", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addProviderTiles(name = "Esri.WorldImagery", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addProviderTiles(name = "Esri.WorldImagery") %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addProviderTiles("Esri.WorldImagery") %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
leaflet(data) %>%
addTiles() %>%
# addMapPane(name = "OpenTopoMap", zIndex = 420) %>%
addMapPane(name = "CartoDB_VoyagerNoLabels", zIndex = 420) %>%
# addProviderTiles("Esri.WorldImagery") %>%
addMarkers(
data = data,
lng = ~ longitude,
lat = ~ latitude,
popup = ~ paste("Stratum: ", water),
icon = ~ icons(
iconUrl = iconFiles[water],
popupAnchorX = 20, popupAnchorY = 0
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()

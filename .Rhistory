ggplot() +
geom_col(aes(x = stratum, y = areaweight, fill = stratum)) +
# facet_grid(.~county) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
total_count_area <- trash_df %>%
group_by(county, stratum) %>%
summarise(
`Total Area` = sum(areaweight),
`Total Count` = sum(totalcount)
) %>%
pivot_longer(
cols = c(`Total Count`, `Total Area`)
) %>%
mutate_at('name', factor, levels = c('Total Count', 'Total Area')) %>%
ggplot() +
geom_col(aes(x = stratum, y = value, group = county, fill = stratum)) +
facet_grid(name ~ county, scales = 'free_y') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = 'none') +
labs(
x = '',
y = ''
)
trash_w_stratum <- trash_weight_stratum %>%
pivot_longer(
cols = -c(stratum)
) %>%
filter(name != 'plastic') %>%
ggplot(aes(x = stratum, y = value, group = stratum, fill = stratum)) +
geom_col(position = "dodge") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = 'none') +
# facet_grid(.~ county) +
labs(
x = '',
y = 'Area Weighted Mean Counts'
)
trash_w_county <- trash_weight_county %>%
pivot_longer(
cols = -c(county)
) %>%
filter(name != 'plastic') %>%
ggplot(aes(x = county, y = value, group = county, fill = county)) +
geom_col(position = "dodge") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = 'none') +
# facet_grid(.~ county) +
labs(
x = '',
y = 'Area Weighted Mean Counts'
)
#### function for tab 3.5: magnititude and trend ---------- ####
get_tab3_title <- function(year, type){
ifelse(
type == "Compare",
paste("Trend of ", type, " Data Over"),
paste(type, " Data Collected in ", year)
)
}
tab3_pick_data <- function(year, type){
new_names = c("stationid","stratum","region","area_weight","type","count")
if (year == 2018 & type == "Ocean"){
read.csv("data/Ocean/2018_debris_counts_in_details.csv") %>%
filter(abandoned == "No") %>%
select(stationid, final_stratum, region, area_weight, debris_type, debriscount) %>%
set_colnames(new_names)
} else if (year == 2018 & type == "River") {
read.csv("data/River/2018_river_debris_count.csv") %>%
select(stationid, stratum, county, area_weight, debriscategory, total_count) %>%
set_colnames(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = ifelse(stratum == 'Ag', 'Agriculture', stratum)
) %>%
select(new_names)
} else if (year == 2013 & type == "Ocean") {
read.csv("data/Ocean/2013_ocean_debris_count.csv") %>%
filter(count >= 0) %>%
select(stationid, stratum, region, areaweight, debriscategory, count) %>%
mutate(region = str_to_title(region)) %>%
set_colnames(new_names)
} else if (year == 2013 & type == "River") {
read.csv("data/River/2013_river_debris_count.csv") %>%
filter(totalcount >= 0) %>%
select(-c(sample_date,latitude,longitude,smcshed,location,totalcount)) %>%
melt(id.vars = c("stationid","stratum","area_weight","county"),
value.name = "count") %>%
mutate(type = str_remove(variable, "total"),
region = county) %>%
select(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = if_else(stratum == 'Ag', 'Agriculture', stratum),
region = str_to_title(region))
} else {
NULL
}
}
tab3_by_year_plotter <- function(year, type, groupBy, plot_tt_cnt){
if (groupBy == "stratum"){
tb = tab3_pick_data(year, type) %>%
group_by(stratum) %>%
summarise(
count = sum(count),
area_weight = mean(area_weight),
average_count = count/area_weight)
if (plot_tt_cnt==T){
plot = ggplot(tb) +
geom_col(aes(x = stratum, y = count)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = 'Total count', title = 'Total count of trash per stratum')
} else {
plot = ggplot(tb) +
geom_col(aes(x = stratum, y = average_count)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = 'Count per sq.km', title = 'Area weighted mean count per stratum')
}
}
if (groupBy == "county"){
tb = tab3_pick_data(year, type) %>%
group_by(region) %>%
summarise(
count = sum(count),
area_weight = mean(area_weight),
average_count = count/area_weight)
if (plot_tt_cnt==T){
plot = ggplot(tb) +
geom_col(aes(x = region, y = count)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = 'Total count', title = 'Total count of trash per county')
} else {
plot = ggplot(tb) +
geom_col(aes(x = region, y = average_count)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = 'Count per sq.km', title = 'Area weighted mean count per county')
}
}
if (groupBy == "trashType"){
tb = tab3_pick_data(year, type) %>%
group_by(type) %>%
summarise(
count = sum(count),
area_weight = mean(area_weight),
average_count = count/area_weight)
if (plot_tt_cnt==T){
plot = ggplot(tb) +
geom_col(aes(x = type, y = count)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = 'Total count', title = 'Total count of trash per trash category')
} else {
plot = ggplot(tb) +
geom_col(aes(x = type, y = average_count)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = '', y = 'Count per sq.km', title = 'Area weighted mean count per trash category')
}
}
return(plot)
}
tab3_relative_plotter <- function(year, type){
plot = tab3_pick_data(year, type) %>%
filter(type != 'None') %>%
group_by(stratum, type) %>%
summarise(
count = sum(count),
area_weight = mean(area_weight)
) %>%
group_by(stratum) %>%
mutate(relative_p = count/sum(count)) %>%
ggplot() +
geom_col(aes(x = stratum, y = relative_p, fill = type), position = 'stack') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsci::scale_fill_jco() +
scale_y_continuous(labels = scales::percent) +
labs(
x = '',
y = 'Relative %',
title = 'Relative Percentage of Trash Type per Land Use Stratum',
fill = ''
)
return(plot)
}
tab3_compare_plotter <- function(type, groupBy){
data_2013 = tab3_pick_data(2013, type)
data_2018 = tab3_pick_data(2018, type)
if (groupBy == "stratum"){
tb_2013 = group_by(data_2013, stratum) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
tb_2018 = group_by(data_2018, stratum) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
plot =
bind_rows(
tb_2013 %>% mutate(year = 2013),
tb_2018 %>% mutate(year = 2018)
) %>%
mutate(year = as.factor(year)) %>%
ggplot() +
geom_col(aes(x = stratum, y = count, group = year, fill = year), position = 'dodge') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsci::scale_fill_jco() +
labs(x = '', y = 'Total count', title = 'Total count of trash per stratum')
}
if (groupBy == "county"){
tb_2013 = group_by(data_2013, region) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
tb_2018 = group_by(data_2018, region) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
plot =
bind_rows(
tb_2013 %>% filter(region %in% tb_2018$region) %>%mutate(year = 2013),
tb_2018 %>% filter(region %in% tb_2013$region) %>% mutate(year = 2018)
) %>%
mutate(year = as.factor(year)) %>%
ggplot() +
geom_col(aes(x = region, y = count, group = year, fill = year), position = 'dodge') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsci::scale_fill_jco() +
labs(x = '', y = 'Total count', title = 'Total count of trash per county')
}
if (groupBy == "trashType"){
tb_2013 = group_by(data_2013, type) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
tb_2018 = group_by(data_2018, type) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
plot =
bind_rows(
tb_2013 %>% mutate(year = 2013),
tb_2018 %>% mutate(year = 2018)
) %>%
mutate(year = as.factor(year)) %>%
ggplot() +
geom_col(aes(x = type, y = count, group = year, fill = year), position = 'dodge') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsci::scale_fill_jco() +
labs(x = '', y = 'Total count', title = 'Total count of trash per trash category')
}
return(plot)
}
tab3_plotter <- function(year,type){
data.frame(year = c(1994,1998,2008,2013,2018),
Ocean = c(113,242,140,164,164),
River = c(70,70,70,273,118)) %>%
melt(id.vars = "year") %>%
ggplot(aes(x = as.character(year), y = value, fill = variable, shape = variable)) +
geom_bar(stat="identity", position ="dodge", alpha = 0.5, linetype = "dashed") +
scale_fill_manual(values = c("Ocean"="blue", "River"="red")) +
labs(x = "Year", y = "Number of Sites Sampled", subtitle = paste(type, "data collected in", year)) +
facet_wrap(variable~., scales = "free_y", ncol = 1) +
theme_minimal() +
theme(legend.position = "none")
}
#### functions for tab 4: distance to nearest road -------- ####
#### functions for tab 5: data ------------------------ ####
#### functions for tab 6: summary -------------------- ####
tab3_compare_plotter("River", "stratum")
ifelse(
type == "Compare",
paste("Trend of ", type, " Data Over"),
paste(type, " Data Collected in ", year)
)
get_tab3_title <- function(year, type){
ifelse(type == "Compare", paste("Trend of ", type, " Data Over"), paste(type, " Data Collected in ", year))
}
tab3_pick_data <- function(year, type){
new_names = c("stationid","stratum","region","area_weight","type","count")
if (year == 2018 & type == "Ocean"){
read.csv("data/Ocean/2018_debris_counts_in_details.csv") %>%
filter(abandoned == "No") %>%
select(stationid, final_stratum, region, area_weight, debris_type, debriscount) %>%
set_colnames(new_names) %>%
mutate(type = stringr::str_to_title(type))
} else if (year == 2018 & type == "River") {
read.csv("data/River/2018_river_debris_count.csv") %>%
select(stationid, stratum, county, area_weight, debriscategory, total_count) %>%
set_colnames(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = ifelse(stratum == 'Ag', 'Agriculture', stratum),
type = stringr::str_to_title(type)
) %>%
select(new_names)
} else if (year == 2013 & type == "Ocean") {
read.csv("data/Ocean/2013_ocean_debris_count.csv") %>%
filter(count >= 0) %>%
select(stationid, stratum, region, areaweight, debriscategory, count) %>%
mutate(region = str_to_title(region),
type = stringr::str_to_title(type)) %>%
set_colnames(new_names)
} else if (year == 2013 & type == "River") {
read.csv("data/River/2013_river_debris_count.csv") %>%
filter(totalcount >= 0) %>%
select(-c(sample_date,latitude,longitude,smcshed,location,totalcount)) %>%
melt(id.vars = c("stationid","stratum","area_weight","county"),
value.name = "count") %>%
mutate(type = str_remove(variable, "total"),
type = stringr::str_to_title(type),
region = county) %>%
select(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = if_else(stratum == 'Ag', 'Agriculture', stratum),
region = str_to_title(region))
} else {
NULL
}
}
tab3_compare_plotter <- function(type, groupBy){
data_2013 = tab3_pick_data(2013, type)
data_2018 = tab3_pick_data(2018, type)
if (groupBy == "stratum"){
tb_2013 = group_by(data_2013, stratum) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
tb_2018 = group_by(data_2018, stratum) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
plot =
bind_rows(
tb_2013 %>% mutate(year = 2013),
tb_2018 %>% mutate(year = 2018)
) %>%
mutate(year = as.factor(year)) %>%
ggplot() +
geom_col(aes(x = stratum, y = count, group = year, fill = year), position = 'dodge') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsci::scale_fill_jco() +
labs(x = '', y = 'Total count', title = 'Total count of trash per stratum')
}
if (groupBy == "county"){
tb_2013 = group_by(data_2013, region) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
tb_2018 = group_by(data_2018, region) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
plot =
bind_rows(
tb_2013 %>% filter(region %in% tb_2018$region) %>%mutate(year = 2013),
tb_2018 %>% filter(region %in% tb_2013$region) %>% mutate(year = 2018)
) %>%
mutate(year = as.factor(year)) %>%
ggplot() +
geom_col(aes(x = region, y = count, group = year, fill = year), position = 'dodge') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsci::scale_fill_jco() +
labs(x = '', y = 'Total count', title = 'Total count of trash per county')
}
if (groupBy == "trashType"){
tb_2013 = group_by(data_2013, type) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
tb_2018 = group_by(data_2018, type) %>% summarise(count = sum(count), area_weight = mean(area_weight), average_count = count/area_weight)
plot =
bind_rows(
tb_2013 %>% mutate(year = 2013),
tb_2018 %>% mutate(year = 2018)
) %>%
mutate(year = as.factor(year)) %>%
ggplot() +
geom_col(aes(x = type, y = count, group = year, fill = year), position = 'dodge') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggsci::scale_fill_jco() +
labs(x = '', y = 'Total count', title = 'Total count of trash per trash category')
}
return(plot)
}
tab3_compare_plotter("River", "county")
runApp()
runApp()
runApp()
runApp()
read.csv("data/Ocean/2018_debris_counts_in_details.csv") %>%
filter(abandoned == "No") %>%
select(stationid, final_stratum, region, area_weight, debris_type, debriscount) %>%
set_colnames(new_names) %>%
mutate(type = stringr::str_to_title(type))
new_names = c("stationid","stratum","region","area_weight","type","count")
read.csv("data/Ocean/2018_debris_counts_in_details.csv") %>%
filter(abandoned == "No") %>%
select(stationid, final_stratum, region, area_weight, debris_type, debriscount) %>%
set_colnames(new_names) %>%
mutate(type = stringr::str_to_title(type))
read.csv("data/River/2018_river_debris_count.csv") %>%
select(stationid, stratum, county, area_weight, debriscategory, total_count) %>%
set_colnames(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = ifelse(stratum == 'Ag', 'Agriculture', stratum),
type = stringr::str_to_title(type)
) %>%
select(new_names) %>%
mutate(type = stringr::str_to_title(type))
read.csv("data/Ocean/2013_ocean_debris_count.csv") %>%
filter(count >= 0) %>%
select(stationid, stratum, region, areaweight, debriscategory, count) %>%
mutate(region = str_to_title(region),
type = stringr::str_to_title(type)) %>%
set_colnames(new_names) %>%
mutate(type = stringr::str_to_title(type))
read.csv("data/Ocean/2013_ocean_debris_count.csv") %>%
filter(count >= 0) %>%
select(stationid, stratum, region, areaweight, debriscategory, count) %>%
mutate(region = str_to_title(region)) %>%
set_colnames(new_names) %>%
mutate(type = stringr::str_to_title(type))
read.csv("data/River/2013_river_debris_count.csv") %>%
filter(totalcount >= 0) %>%
select(-c(sample_date,latitude,longitude,smcshed,location,totalcount)) %>%
melt(id.vars = c("stationid","stratum","area_weight","county"),
value.name = "count") %>%
mutate(type = str_remove(variable, "total"),
region = county) %>%
select(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = if_else(stratum == 'Ag', 'Agriculture', stratum),
region = str_to_title(region),
type = stringr::str_to_title(type))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tab3_pick_data(2018, 'River')
tab3_pick_data(2018, 'River') %>% dim()
tab3_pick_data(2018, 'River') %>% select(stationid) %>% unique() %>% dim()
tab3_pick_data(2018, 'Ocean') %>% select(stationid) %>% unique() %>% dim()
tab3_pick_data(2013, 'Ocean') %>% select(stationid) %>% unique() %>% dim()
tab3_pick_data(2013, 'River') %>% select(stationid) %>% unique() %>% dim()
runApp()
runApp()
runApp()
runApp()
if (year == 2018 & type == "Ocean"){
read.csv("data/Ocean/2018_debris_counts_in_details.csv") %>%
filter(abandoned == "No") %>%
select(stationid, final_stratum, region, area_weight, debris_type, debriscount) %>%
set_colnames(new_names) %>%
mutate(type = stringr::str_to_title(type))
} else if (year == 2018 & type == "River") {
read.csv("data/River/2018_river_debris_count.csv") %>%
select(stationid, stratum, county, area_weight, debriscategory, total_count) %>%
set_colnames(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = ifelse(stratum == 'Ag', 'Agriculture', stratum),
type = stringr::str_to_title(type)
) %>%
select(new_names) %>%
mutate(type = stringr::str_to_title(type))
} else if (year == 2013 & type == "Ocean") {
read.csv("data/Ocean/2013_ocean_debris_count.csv") %>%
filter(count >= 0) %>%
select(stationid, stratum, region, areaweight, debriscategory, count) %>%
mutate(region = str_to_title(region)) %>%
set_colnames(new_names) %>%
mutate(type = stringr::str_to_title(type))
} else if (year == 2013 & type == "River") {
read.csv("data/River/2013_river_debris_count.csv") %>%
filter(totalcount >= 0) %>%
select(-c(sample_date,latitude,longitude,smcshed,location,totalcount)) %>%
melt(id.vars = c("stationid","stratum","area_weight","county"),
value.name = "count") %>%
mutate(type = str_remove(variable, "total"),
region = county) %>%
select(new_names) %>%
mutate(
stratum = as.character(stratum),
stratum = if_else(stratum == 'Ag', 'Agriculture', stratum),
region = str_to_title(region),
type = stringr::str_to_title(type))
} else {
NULL
}
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinyjs)
library(shinythemes)
library(shinyWidgets)
library(shinycssloaders)
library(gridExtra)
library(ggsci)
library(DT)
install.packages("DT")
library(shiny)
library(shinyjs)
library(shinythemes)
library(shinyWidgets)
library(shinycssloaders)
library(gridExtra)
library(ggsci)
library(DT)
runApp()
runApp()
runApp()
library(tidyverse)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
map_data = read.csv("./data/map_data_04_30_2020.csv")
table(map_data$tag)

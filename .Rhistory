setwd("~/Dropbox (CSU Fullerton)/Consulting project/SCCWRP1-Shiny")
library(shiny)
library(shiny)
library(shiny)
library(shinyjs)
install.packages('shinyjs')
library(shinyjs)
library(shinyjs)
library(shinythemes)
install.packages('shinythemes')
library(shinythemes)
# Define UI for application that draws a histogram
shinyUI(
fluidPage(
# set up logo
tags$a(href = "https://www.sccwrp.org", tags$img(src = "sccwrp_logo.jpg", title = "SCCWRP", width = "300", height = "80")),
navbarPage(
theme = shinytheme("cosmo"),
#cerulean, cosmo**, flatly, journal, lumen**, paper, readable, sandstone, simplex, spacelab*,yeti**
collapsible = TRUE,
"Trash and Marine Debris",
id="nav",
# tab panel for plot
tabPanel(
"Background",
sidebarLayout(
sidebarPanel(sliderInput("bins", "Number of observations:", min = 1, max = 50, value = 5)),
mainPanel(plotOutput("distPlot")))),
# tab panel for maps
tabPanel(
"Station mapper"
),
# tab panel for trend bar over years
tabPanel(
"Trend over years"
),
# tab panel for model on distance vs trash abundance
tabPanel(
"Distance to nearest road"
),
# tab panel for data table
tabPanel(
"Data",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "Year", label = "Year", choices = c(2013, 2018)),
radioButtons(inputId = "Type", label = "Type", choices = c("Ocean","River"))),
mainPanel(dataTableOutput("tb_displayed")))),
# tabl panel for all write ups
tabPanel(
"Summary"
)
) # end of navbarPanel
) # end of fluidPage
) # end of ui
runApp()
runApp()
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
get_current <- reactive({
if (input$Year == 2013 & input$Type == "River"){d=read.csv("./data/2013/River/trash_areaweighted_count_by_county.csv")}
else if (input$Year == 2013 & input$Type == "Ocean"){d=readxl::read_excel("./data/2013/Ocean/Debris Ocean 2013.xlsx")}
else if (input$Year == 2018 & input$Type == "River"){d=read.csv("./data/2018/River/river_2018.csv")}
else if (input$Year == 2018 & input$Type == "Ocean"){d=read.csv("./data/2018/Ocean/ocean_2018.csv")}
else{d=NULL}
})
output$tb_displayed <- renderDataTable(get_current())
})
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
2013-5
2008-5
runApp()
runApp()
source("./script/functions.R")
runApp()
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
call_river_2013 <- function(
read.csv("./data/2013/River/Bight_2013_Regional_Survey__Trash_and_Debris_in_Rivers.csv") %>%
mutate(
sampledate = as.Date(sampledate),
stratum = if_else(
as.character(stratum) == 'Ag',
'Agriculture',
as.character(stratum)
)
)
)
